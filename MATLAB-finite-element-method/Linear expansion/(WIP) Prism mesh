% Prism
clear all

%********************************************************************
%                           Settings
%********************************************************************
% Note: not all N, L and D values are compatible with each other
L = 30; % Sidelength
D=10; % Diameter / Height
N = 12;

plot_tri_geometry = false;
plot_2D_tri_mesh = false;
plot_tri_surfaces = false;

plot_cyl_geometry= false;
plot_2D_cyl_mesh = false;
plot_prism_without_corners = false;

plot_sph_geometry = false;
plot_2D_sph_mesh = false;

plot_final_prism = true;

plot_normals=false;
%********************************************************************

H = sqrt(3)/2*L;
R=D/2;
N_l=N; clear N
hmax = ceil(2*pi*R/N_l);

%**********************************
%***** Create and plot 2D triangle geometry
%**********************************

for i=1:N_l % Bottom
    t1a=L*(i-1)/N_l;
    t2a=0;
    t1b=L*i/N_l;
    t2b=0;
    row=[2 t2a t2b t1a t1b 2 0];
    A(i,:)=row;
    if plot_tri_geometry==true
    plot(t1a,t2a,'r*'); % Colors can be changed to highlight what each loop is plotting
    hold on
    end
end
for i=1:N_l % Left
    t1a=L*i/(2*N_l);
    t2a=H*i/N_l;
    t1b=L*(i-1)/(2*N_l);
    t2b=H*(i-1)/N_l;
    row=[2 t2a t2b t1a t1b 2 0];
    A(i+N_l,:)=row;
    if plot_tri_geometry==true
    plot(t1a,t2a,'r*');
    end
end
for i=1:N_l % Right
    t1a=L-L*(i-1)/(2*N_l);
    t2a=H*(i-1)/N_l;
    t1b=L-L*i/(2*N_l);
    t2b=H*i/N_l;
    row=[2 t2a t2b t1a t1b 2 0];
    A(i+2*N_l,:)=row;
    if plot_tri_geometry==true
    plot(t1a,t2a,'r*');
    end
end
if plot_tri_geometry==true
axis image
hold off
end
g_tri = transpose(A);

%**********************************
%***** Create and plot 2D triangle mesh
%**********************************

%hmax = 5; % Maximum distance between points.
[p,e,t]=initmesh(g_tri,'hmax',hmax);
P_tri = p; % Matrix containing positions of every corner plotted.
T_tri = t; % Matrix identifying which corners form a (small) triangle.
if plot_2D_tri_mesh==true
h_tri=pdemesh(p,e,t); % Plots the mesh
hold on
set(h_tri,'linewidth',1.3,'color','k')
plot(P_tri(1,:),P_tri(2,:),'r*') % Plots the (small) triangle corners in red
axis image
xlabel('t_2')
ylabel('t_1')
set(gca,'fontsize',15)
hold off
end
pt = [P_tri P_tri;ones(1,length(P_tri))*R -ones(1,length(P_tri))*R];
tt = [T_tri T_tri+[length(P_tri);length(P_tri);length(P_tri);0]];
xc = 0;
yc=0;
zc=0;

if plot_tri_surfaces==true
clear x y z r1 r2 r3 td
for k = 1:length(tt)
   r1=pt(:,tt(1,k)); x1=r1(1); y1=r1(2); z1=r1(3);
   r2=pt(:,tt(2,k)); x2=r2(1); y2=r2(2); z2=r2(3);   
   r3=pt(:,tt(3,k)); x3=r3(1); y3=r3(2); z3=r3(3);
   x(:,k)=[x1 x2 x3 x1]; 
   y(:,k)=[y1 y2 y3 y1];
   z(:,k)=[z1 z2 z3 z1];
end
fill3(x,y,z,'w','linewidth',1.3)
xlabel('x')
ylabel('y')
zlabel('z')
set(gca,'fontsize',15)
axis image
end

%**********************************
%***** Create and plot 2D cylinder geometry
%**********************************
N_cyl = ceil(pi*R*N_l/L); % Rounds up
N_cyl2 = ceil(H*N_cyl/(pi*R));

for i=1:N_cyl % Bottom
    t1a=pi*R*(i-1)/N_cyl;
    t2a=0;
    t1b=pi*R*(i)/N_cyl;
    t2b=0;
    row=[2 t2a t2b t1a t1b 2 0];
    A(i,:)=row;
    if plot_cyl_geometry==true
    plot(t1a,t2a,'r*'); % Colors can be changed to highlight what each loop is plotting
    hold on
    end
end
for i=1:N_cyl % Top
    t1a=pi*R*(i)/N_cyl;
    t2a=L;
    t1b=pi*R*(i-1)/N_cyl;
    t2b=L;
    row=[2 t2a t2b t1a t1b 2 0];
    A(i+N_cyl,:)=row;
    if plot_cyl_geometry==true
    plot(t1a,t2a,'r*'); 
    end
end
for i=1:N_cyl2 % Left 
    t1a=0;
    t2a=L*(i)/(N_cyl2);
    t1b=0;
    t2b=L*(i-1)/(N_cyl2);
    row=[2 t2a t2b t1a t1b 2 0];
    A(i+N_cyl*2,:)=row;
    if plot_cyl_geometry==true
    plot(t1a,t2a,'b*');
    end
end
for i=1:N_cyl2 % Right 
    t1a=pi*R;
    t2a=L*(i-1)/(N_cyl2);
    t1b=pi*R;
    t2b=L*(i)/(N_cyl2);
    row=[2 t2a t2b t1a t1b 2 0];
    A(i+N_cyl*2+N_cyl2,:)=row;
    if plot_cyl_geometry==true
    plot(t1a,t2a,'b*');
    end
end
if plot_cyl_geometry==true
axis image
hold off
end
g_cyl = transpose(A);

%hmax = 2; % Maximum distance between points.
[p,e,t]=initmesh(g_cyl,'hmax',hmax);
P_cyl = p; % Matrix containing positions of every corner plotted.
T_cyl = t; % Matrix identifying which corners form a triangle.
if plot_2D_cyl_mesh
h=pdemesh(p,e,t); % Plots the mesh
hold on
set(h,'linewidth',1.3,'color','k')
plot(P_cyl(1,:),P_cyl(2,:),'r*') % Plots the triangle corners in red
axis image
xlabel('t_2')
ylabel('t_1')
set(gca,'fontsize',15)
hold off
end

xc=0; % Center of the figure.
yc=0; 
zc=L;
n=0;
for i=1:length(P_cyl)
    t2=P_cyl(1,i); t1=P_cyl(2,i);
    z=t2;
    x = R*cos(t1/R); % Transformation of x from t1,t2-plane
    y = R*sin(t1/R); % Transformation of y from t1,t2-plane
    pc(1,i+n)=x;
    pc(2,i+n)=y;
    pc(3,i+n)=z;
end
td=zeros(7,length(t));
td(1,:)=1; td(2,:)=xc; td(3,:)=yc; td(4,:)=zc;
tc=[t(1,:)+n;t(2,:)+n;t(3,:)+n;td]; 
n=n+length(p);

angle = pi/2;
pc=[1 0 0 ;0 cos(angle) -sin(angle);0 sin(angle) cos(angle)]*pc+[0;L;0];
angle= -pi/2;
pc=[cos(angle) 0 sin(angle);0 1 0;-sin(angle) 0 cos(angle)]*pc;
angle = pi;
pc2 = [1 0 0;0 cos(angle) -sin(angle);0 sin(angle) cos(angle)]*pc;
%pc3 = [1 0 0;0 cos(angle) -sin(angle);0 sin(angle) cos(angle)]*pc;
angle =2*pi/3;
pc2 = [cos(angle) -sin(angle) 0;sin(angle) cos(angle) 0;0 0 1]*pc2;
angle = -2*pi/3;
pc3 = [cos(angle) -sin(angle) 0;sin(angle) cos(angle) 0;0 0 1]*pc+[0;L;0];

tc = [tc tc+[length(pc);length(pc);length(pc);0;0;0;0;0;0;0] tc+[length(pc);length(pc);length(pc);0;0;0;0;0;0;0]*2];
pc=[pc pc2 pc3];

tt = [tt;zeros(1,length(tt));zeros(1,length(tt));ones(1,length(tt));zeros(1,length(tt));zeros(1,length(tt));zeros(1,length(tt))];
T = [tt tc+[length(pt);length(pt);length(pt);0;0;0;0;0;0;0]];
P = [pt pc];


if plot_prism_without_corners==true
clear x y z r1 r2 r3
for k = 1:length(T)
   r1=P(:,T(1,k)); x1=r1(1); y1=r1(2); z1=r1(3);
   r2=P(:,T(2,k)); x2=r2(1); y2=r2(2); z2=r2(3);   
   r3=P(:,T(3,k)); x3=r3(1); y3=r3(2); z3=r3(3);
   x(:,k)=[x1 x2 x3 x1]; 
   y(:,k)=[y1 y2 y3 y1];
   z(:,k)=[z1 z2 z3 z1];
end
fill3(x,y,z,'w','linewidth',1.3)
xlabel('x')
ylabel('y')
zlabel('z')
set(gca,'fontsize',15)
axis image
end

%**********************************
%***** Spherical corners
%**********************************
N_sph = ceil(2*pi*R*N_l/(3*L));
clear p e t A x y z
angle = pi/3;
% Left:
for i=1:N_sph 
    t1a=pi/2*R*(i-1)/N_sph;
    t2a=-angle*R*sin(t1a/R);
    t1b=pi/2*R*(i)/N_sph;
    t2b=-angle*R*sin(t1b/R);
    row=[2 t2a t2b t1a t1b 1 0];
    A(i,:)=row;
    if plot_sph_geometry==true
    plot(t2a,t1a,'r*'); % Colors can be changed to highlight what each loop is plotting
    hold on
    end
end
% Top:
for i=1:N_sph 
    t1a=pi/2*R; t1b=t1a;
    t2a=-angle*R+2*angle*R*(i-1)/N_sph;
    t2b=-angle*R+2*angle*R*(i)/N_sph;
    row=[2 t2a t2b t1a t1b 1 0];
    A(i+N_sph,:)=row;
    if plot_sph_geometry==true
    plot(t2a,t1a,'r*'); 
    end
end
% Right:
for i=1:N_sph 
    t1a=pi/2*R*(N_sph-i+1)/N_sph;
    t2a=angle*R*sin(t1a/R);
    t1b=pi/2*R*(N_sph-i)/N_sph;
    t2b=angle*R*sin(t1b/R);
    row=[2 t2a t2b t1a t1b 1 0];
    A(i+2*N_sph,:)=row;
    if plot_sph_geometry==true
    plot(t2a,t1a,'r*'); 
    end
end
if plot_sph_geometry==true
set(gca,'fontsize',15)
    xlabel('t_2')
    ylabel('t_1')
axis image
hold off
end
g_sph = transpose(A); % Geometry matrix

%**********************************
%***** Construct 2D mesh
%**********************************
hmax = 5; % Maximum distance between points.
[p,e,t]=initmesh(g_sph,'hmax',hmax+0.5*hmax);
P_sph = p; % Matrix containing positions of every corner plotted.
T_sph = t; % Matrix identifying which corners form a triangle.
if plot_2D_sph_mesh==true
h_sph=pdemesh(p,e,t); % Plots the mesh
hold on
set(h_sph,'linewidth',1.3,'color','k')
plot(P_sph(1,:),P_sph(2,:),'r*') % Plots the triangle corners in red
axis image
xlabel('t_2')
ylabel('t_1')
set(gca,'fontsize',15)
hold off
end

%**********************************
%***** Transformation from t1,t2-plane to x,y,z-plane
%**********************************
n = 0;
xc=0; % Center of the figure.
yc=0; 
zc=L;

for i=1:length(P_sph)
    t2=P_sph(1,i); t1=P_sph(2,i);
    z=R*cos(t1/R);
    x = cos(t2/(R*sin(t1/R)))*R*sin(t1/R); % Transformation of x from t1,t2-plane
    y = sin(t2/(R*sin(t1/R)))*R*sin(t1/R); % Transformation of y from t1,t2-plane
    if t1==0 % To avoid division by 0
        x=0; y=0;
    end
    ps(1,i+n)=x;
    ps(2,i+n)=y;
    ps(3,i+n)=z;
end

td=zeros(7,length(t));
td(1,:)=1; td(2,:)=xc; td(3,:)=yc; td(4,:)=zc;
ts=[t(1,:)+n;t(2,:)+n;t(3,:)+n;td];
n=n+length(p);

% Top
angle = -2*pi/3;
ps = [cos(angle) -sin(angle) 0;sin(angle) cos(angle) 0;0 0 1]*ps;
ps2 = [cos(angle) -sin(angle) 0;sin(angle) cos(angle) 0;0 0 1]*ps+[0;L;0];
angle = -4*pi/3;
ps3 = [cos(angle) -sin(angle) 0;sin(angle) cos(angle) 0;0 0 1]*ps+[H;L*0.5;0];

% Bottom
ps4 = [1 0 0;0 1 0;0 0 -1]*ps;
ps5 = [1 0 0;0 1 0;0 0 -1]*ps2;
ps6 = [1 0 0;0 1 0;0 0 -1]*ps3;

add_length = [length(ps);length(ps);length(ps);0;0;0;0;0;0;0];
ts = [ts ts+add_length ts+add_length*2 ts+add_length*3 ts+add_length*4 ts+add_length*5];
ps = [ps ps2 ps3 ps4 ps5 ps6];
T = [T ts+[length(P);length(P);length(P);0;0;0;0;0;0;0]];
P = [P ps];

%**********************************
%***** Removing points appearing twice
%**********************************
j2=1;
while j2<length(P)
  x=P(1,j2); y=P(2,j2); z=P(3,j2); 
  found=false;
  jfound=0;
   for j1=1:(j2-1)
      if abs(P(1,j1)-x)<1e-7
          if abs(P(2,j1)-y)<1e-7
              if abs(P(3,j1)-z)<1e-7
                 found=true; 
                 jfound=j1;
              end
          end
      end
   end
   if found==false
       j2=j2+1;
   end
   if found==true
       pd1=P(:,1:j2-1); pd2=P(:,j2+1:length(P));
       P=[pd1 pd2];
       for jt1=1:3
           for jt2=1:length(T)
               if T(jt1,jt2)==j2, T(jt1,jt2)=jfound; end
               if T(jt1,jt2)>j2, T(jt1,jt2)=T(jt1,jt2)-1; end
           end
       end
   end
end

%**********************************
%***** Plotting the complete prism
%**********************************
if plot_final_prism==true
clear x y z r1 r2 r3
for k = 1:length(T)
   r1=P(:,T(1,k)); x1=r1(1); y1=r1(2); z1=r1(3);
   r2=P(:,T(2,k)); x2=r2(1); y2=r2(2); z2=r2(3);   
   r3=P(:,T(3,k)); x3=r3(1); y3=r3(2); z3=r3(3);
   x(:,k)=[x1 x2 x3 x1]; 
   y(:,k)=[y1 y2 y3 y1];
   z(:,k)=[z1 z2 z3 z1];
end
fill3(x,y,z,'w','linewidth',1.3)
xlabel('x')
ylabel('y')
zlabel('z')
set(gca,'fontsize',15)
axis image
end

%**********************************
%***** Adding normal vectors to T matrix
%**********************************
T2=T(1:6,1:length(T));
   for k=1:length(T)
      if T(4,k)==1 || T(4,k)==2
          %part of sphere
          xc=0; yc=0; zc=0;
          x1=P(1,T(1,k)); y1=P(2,T(1,k)); z1=P(3,T(1,k));
          x2=P(1,T(2,k)); y2=P(2,T(2,k)); z2=P(3,T(2,k));
          x3=P(1,T(3,k)); y3=P(2,T(3,k)); z3=P(3,T(3,k));
          nx=(y2-y1)*(z3-z1)-(y3-y1)*(z2-z1);
          ny=(z2-z1)*(x3-x1)-(z3-z1)*(x2-x1);
          nz=(x2-x1)*(y3-y1)-(x3-x1)*(y2-y1);
          dummy=sqrt(nx^2+ny^2+nz^2); 
          nx=nx/dummy; ny=ny/dummy; nz=nz/dummy;
          if nx*(x1-xc)+ny*(y1-yc)+nz*(z1-zc)>0
              T2(5,k)=nx;
              T2(6,k)=ny;
              T2(7,k)=nz;
          else
              T2(5,k)=-nx;
              T2(6,k)=-ny;
              T2(7,k)=-nz;
          end
      end
      if T(4,k)==3 && (P(3,T(3,k))==-B/2 || P(3,T(2,k))==-B/2 || P(3,T(1,k))==-B/2)
          T2(5,k)=0;
          T2(6,k)=0;
          T2(7,k)=-1;
      end
      
      if T(4,k)==3 && (P(3,T(3,k))==B/2 || P(3,T(2,k))==B/2 || P(3,T(1,k))==B/2)
          T2(5,k)=0;
          T2(6,k)=0;
          T2(7,k)=1;
      end
      
   end
clear T
T=[T2(1:3,:);T2(5:7,:)];

%**********************************
%***** Plotting the normal vectors
%*********************************
if plot_normals==true
for k=1:length(T)
    xn=P(1,T(2,k)); yn=P(2,T(2,k)); zn=P(3,T(2,k));
    quiver3(xn,yn,zn,T(4,k),T(5,k),T(6,k),'k')
    hold on
end
axis equal
fill3(x,y,z,'w','linewidth',1.3)
hold off
end

