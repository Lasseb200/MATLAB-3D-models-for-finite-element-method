clear all
N_sph = 5;
R = 5;
H = 5+1.5;
HT=sqrt(3)/2*H;
rotate=true; 
circumference = pi/2; % Choose circumference of initial sphere element
angle = 0.5*circumference;

%**********************************
%***** Create and plot geometry
%**********************************
% Left:
for j=1:N_sph 
    t1a=pi/2*R*(j-1)/N_sph;
    t2a=-angle*R*sin(t1a/R);
    t1b=pi/2*R*(j)/N_sph;
    t2b=-angle*R*sin(t1b/R);
    row=[2 t2a t2b t1a t1b 1 0];
    A(j,:)=row;
    plot(t2a,t1a,'r*'); % Color can be changed to highlight what each loop is plotting
    hold on
end
% Top:
for j=1:N_sph 
    t1a=pi/2*R; t1b=t1a;
    t2a=-angle*R+2*angle*R*(j-1)/N_sph;
    t2b=-angle*R+2*angle*R*(j)/N_sph;
    row=[2 t2a t2b t1a t1b 1 0];
    A(j+N_sph,:)=row;
    plot(t2a,t1a,'r*'); 
end
% Right:
for j=1:N_sph 
    t1a=pi/2*R*(N_sph-j+1)/N_sph;
    t2a=angle*R*sin(t1a/R);
    t1b=pi/2*R*(N_sph-j)/N_sph;
    t2b=angle*R*sin(t1b/R);
    row=[2 t2a t2b t1a t1b 1 0];
    A(j+2*N_sph,:)=row;
    plot(t2a,t1a,'r*'); 
end
set(gca,'fontsize',15)
    xlabel('t_2')
    ylabel('t_1')
axis image
hold off

%**********************************
%***** Construct 2D mesh
%**********************************
hmax = 2; % Maximum distance between points.
g_sph = transpose(A); % Geometry matrix
[p e t]=initmesh(g_sph,'hmax',hmax);
P_sph = p; % Matrix containing positions of every corner plotted.
T_sph = t; % Matrix identifying which corners form a triangle. 
h=pdemesh(p,e,t); % Plots the mesh
hold on
set(h,'linewidth',1.3,'color','k')
plot(P_sph(1,:),P_sph(2,:),'r*') % Plots the triangle corners in red
axis image
xlabel('t_2')
ylabel('t_1')
set(gca,'fontsize',15)
hold off

%**********************************
%***** Transformation
%**********************************
ts=[];
n = 0;
xc=0;
yc=0; 
zc=H;

for j=1:length(P_sph)
    t2=P_sph(1,j); t1=P_sph(2,j);
    z=R*cos(t1/R);
    x = cos(t2/(R*sin(t1/R)))*R*sin(t1/R); % Transformation of x from t1,t2-plane
    y = sin(t2/(R*sin(t1/R)))*R*sin(t1/R); % Transformation of y from t1,t2-plane
    if t1==0 % To avoid division by 0
        x=0; y=0;
    end
    ps(1,j+n)=x;
    ps(2,j+n)=y;
    ps(3,j+n)=z;
end

td=zeros(7,length(t));
td(1,:)=1; td(2,:)=xc; td(3,:)=yc; td(4,:)=zc;
t2=[t(1,:)+n;t(2,:)+n;t(3,:)+n;td]; 
ts=[ts t2];
n=n+length(p);
t_plot=ts;
p_plot=ps;

angle = pi/2;
% Top
ps2 = [cos(angle) sin(angle) 0;-sin(angle) cos(angle) 0;0 0 1]*ps;
ps3 = [cos(angle) sin(angle) 0;-sin(angle) cos(angle) 0;0 0 1]*ps2;
ps4 = [cos(angle) sin(angle) 0;-sin(angle) cos(angle) 0;0 0 1]*ps3;
% Bottom
ps5 = [1 0 0;0 1 0;0 0 -1]*ps;
ps6 = [cos(angle) sin(angle) 0;-sin(angle) cos(angle) 0;0 0 -1]*ps;
ps7 = [cos(angle) sin(angle) 0;-sin(angle) cos(angle) 0;0 0 -1]*ps2;
ps8 = [cos(angle) sin(angle) 0;-sin(angle) cos(angle) 0;0 0 -1]*ps3;

%**********************************
%***** Retrieving x/y/z-values (in a not very pretty way)
%**********************************
P = [ps ps2 ps3 ps4 ps5 ps6 ps7 ps8]
T = [ts ts+length(ps) ts+length(ps)*2 ts+length(ps)*3 ts+length(ps)*4 ts+length(ps)*5 ts+length(ps)*6 ts+length(ps)*7]
clear x y z
for k =1:length(T)
   r1=P(:,T(1,k)); x1=r1(1); y1=r1(2); z1=r1(3);
   r2=P(:,T(2,k)); x2=r2(1); y2=r2(2); z2=r2(3);   
   r3=P(:,T(3,k)); x3=r3(1); y3=r3(2); z3=r3(3);
   x(:,k)=[x1 x2 x3 x1]; 
   y(:,k)=[y1 y2 y3 y1];
   z(:,k)=[z1 z2 z3 z1];
end

fill3(x,y,z,'w')
axis image
