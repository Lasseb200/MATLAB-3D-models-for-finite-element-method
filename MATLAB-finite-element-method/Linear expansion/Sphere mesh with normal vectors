% The following script is based on code created by supervisor Thomas SÃ¸ndergaard. 

clear all; close all

N = 6 
R = 6

stepsH1 = 1*4*2; %Discretization parameter along z
stepsH2 = 2*4*2; %Discretization parameter along x

[P T] = construct_quarter_half_sphere(N,R,1,-pi/2,0,0,0,0);
[P2 T2] = construct_quarter_half_sphere(N,R,1,0,pi/2,0,0,0);
T2(1:3,:)=T2(1:3,:)+length(P); T=[T T2]; P=[P P2]; 
[P2 T2] = construct_quarter_half_sphere(N,R,1,pi/2,pi,0,0,0);
T2(1:3,:)=T2(1:3,:)+length(P); T=[T T2]; P=[P P2]; 
[P2 T2] = construct_quarter_half_sphere(N,R,1,pi,3*pi/2,0,0,0);
T2(1:3,:)=T2(1:3,:)+length(P); T=[T T2]; P=[P P2]; 

[P2 T2] = construct_quarter_half_sphere(N,R,2,-pi/2,0,0,0,0);
T2(1:3,:)=T2(1:3,:)+length(P); T=[T T2]; P=[P P2]; 
[P2 T2] = construct_quarter_half_sphere(N,R,2,0,pi/2,0,0,0);
T2(1:3,:)=T2(1:3,:)+length(P); T=[T T2]; P=[P P2]; 
[P2 T2] = construct_quarter_half_sphere(N,R,2,pi/2,pi,0,0,0);
T2(1:3,:)=T2(1:3,:)+length(P); T=[T T2]; P=[P P2]; 
[P2 T2] = construct_quarter_half_sphere(N,R,2,pi,3*pi/2,0,0,0);
T2(1:3,:)=T2(1:3,:)+length(P); T=[T T2]; P=[P P2]; 

pfin=P; tfin=T;
% Remove points that appear twice
if 1==0,
counter=1;
j2=1;
while j2<length(pfin)
  x=pfin(1,j2); y=pfin(2,j2); z=pfin(3,j2); 
  found=false;
  jfound=0;
   for j1=1:(j2-1)
      if abs(pfin(1,j1)-x)<1e-7
          if abs(pfin(2,j1)-y)<1e-7
              if abs(pfin(3,j1)-z)<1e-7
                 found=true; 
                 jfound=j1;
              end
          end
      end
   end
   if found==false
       % do nothing
       j2=j2+1;
   end
   if found==true
       % Remove point
       pd1=pfin(:,1:j2-1); pd2=pfin(:,j2+1:length(pfin));
       pfin=[pd1 pd2];
       for jt1=1:3
           for jt2=1:length(tfin)
               if tfin(jt1,jt2)==j2, tfin(jt1,jt2)=jfound; end
               if tfin(jt1,jt2)>j2, tfin(jt1,jt2)=tfin(jt1,jt2)-1; end
           end
       end
   end
end
P=pfin; T=tfin;
end

if 1==1,
% Remove points that appear twice
pfin=P; tfin=T;
counter=1;
j2=1;
while j2<length(pfin)
  x=pfin(1,j2); y=pfin(2,j2); z=pfin(3,j2); 
  j1=j2+1;
  while j1<=length(pfin),
      found=false;
      jfound=0;
      if abs(pfin(1,j1)-x)<1e-5
          if abs(pfin(2,j1)-y)<1e-5
              if abs(pfin(3,j1)-z)<1e-5
                 found=true; 
                 jfound=j1;
              end
          end
      end
      if found==true,
         % found = true 
         pd1=pfin(:,1:j1-1); pd2=pfin(:,j1+1:length(pfin));
         pfin=[pd1 pd2];
         for jt1=1:3
           for jt2=1:length(tfin)
               if tfin(jt1,jt2)==j1, tfin(jt1,jt2)=j2; end
               if tfin(jt1,jt2)>j1, tfin(jt1,jt2)=tfin(jt1,jt2)-1; end  
           end
         end
      end
      j1=j1+1;
   end
   j2=j2+1;
end
P=pfin; T=tfin;
end


% check that no two points are the same
[a1 a2]=size(P);
for j1=1:a2,
    x=P(1,j1); y=P(2,j1); z=P(3,j1);
    for j2=1:a2,
        xm=P(1,j2); ym=P(2,j2); zm=P(3,j2);
        r=sqrt((x-xm)^2+(y-ym)^2+(z-zm)^2);
        if r<1e-5,
            if j1~=j2,
            j1
            j2
            97
            end
        end
    end
end


figure
p3=P; t=T;
% Draw surface
for k=1:length(t)
   r1=p3(:,t(1,k)); x1=r1(1); y1=r1(2); z1=r1(3);
   r2=p3(:,t(2,k)); x2=r2(1); y2=r2(2); z2=r2(3);   
   r3=p3(:,t(3,k)); x3=r3(1); y3=r3(2); z3=r3(3);
   xv=[x1 x2 x3 x1];
   yv=[y1 y2 y3 y1];
   zv=[z1 z2 z3 z1];
   h=fill3(xv,yv,zv,'w'); set(h,'linewidth',2)   
   if k==1, hold on; end
   % x_0=(x1+x2+x3)/3; y_0=(y1+y2+y3)/3; z_0=(z1+z2+z3)/3;
    %nx=t(4,k); ny=t(5,k); nz=t(6,k);
    %plot3(x_0+nx,y_0+ny,z_0+nz,'ks')
    %xv=[x_0 x_0+nx]; yv=[y_0 y_0+ny]; zv=[z_0 z_0+nz];
    %plot3(xv,yv,zv,'k')
end
hold off
axis image


%**********************************
%* Mesh for a quarter half-sphere *
%**********************************

function [P T]=construct_quarter_half_sphere(N,R,up_down,phi_1,phi_2,x_0,y_0,z_0)
    hmax = pi/2*R/N*1.3; % Maximum distance between points
    for j=1:N
        t1a=pi/2*R*(j-1)/N;
        t2a=-R*(phi_2-phi_1)/2*sin(t1a/R);
        t1b=pi/2*R*(j)/N;
        t2b=-R*(phi_2-phi_1)/2*sin(t1b/R);
        row=[2 t2a t2b t1a t1b 1 0];
        A(j,:)=row;
    end
    for j=1:N
        t1a=pi/2*R; 
        t1b=t1a;
        t2a=-R*(phi_2-phi_1)/2+R*(phi_2-phi_1)*(j-1)/N;
        t2b=-R*(phi_2-phi_1)/2+R*(phi_2-phi_1)*j/N;
        row=[2 t2a t2b t1a t1b 1 0];
        A(j+N,:)=row;
    end
    for j=1:N
        t1a=pi/2*R*(N-j+1)/N;
        t2a=R*(phi_2-phi_1)/2*sin(t1a/R);
        t1b=pi/2*R*(N-j)/N;
        t2b=R*(phi_2-phi_1)/2*sin(t1b/R);
        row=[2 t2a t2b t1a t1b 1 0];
        A(j+2*N,:)=row;
    end
    [p, e, t]=initmesh(A','hmax',hmax);

    phi=phi_1;
    for j=1:length(p)
        t2=p(1,j); t1=p(2,j);

        if up_down==1,
            z=R*cos(t1/R)+z_0;
        end
        if up_down==2,
            z=-R*cos(t1/R)+z_0;
        end
        
        x=R*sin(t1/R)*cos(t2/(R*sin(t1/R))+pi/4+phi)+x_0;
        y=R*sin(t1/R)*sin(t2/(R*sin(t1/R))+pi/4+phi)+y_0;
        if t1==0,
            x=x_0; y=y_0;
        end
        if abs(t1/R-pi)<1e-7,
            x=x_0; y=y_0;
        end
        r=sqrt((x-x_0)^2+(y-y_0)^2+(z-z_0)^2);
        nx=(x-x_0)/r;
        ny=(y-y_0)/r;
        nz=(z-z_0)/r;
        p3(1,j)=x;
        p3(2,j)=y;
        p3(3,j)=z;
    end
    
    td=zeros(6,length(t));
    td(1:3,:)=t(1:3,:);
    for k=1:length(t),
        x1=p3(1,t(1,k)); y1=p3(2,t(1,k)); z1=p3(3,t(1,k));
        x2=p3(1,t(2,k)); y2=p3(2,t(2,k)); z2=p3(3,t(2,k));
        x3=p3(1,t(3,k)); y3=p3(2,t(3,k)); z3=p3(3,t(3,k));
        
        nx=(y2-y1)*(z3-z1)-(z2-z1)*(y3-y1);
        ny=(z2-z1)*(x3-x1)-(x2-x1)*(z3-z1);
        nz=(x2-x1)*(y3-y1)-(y2-y1)*(x3-x1);
        r=sqrt(nx^2+ny^2+nz^2); nx=nx/r; ny=ny/r; nz=nz/r;
        nxapp=(x-x_0); nyapp=(y-y_0); nzapp=(z-z_0);
        if nxapp*nx+nyapp*ny+nzapp*nz<0,
            nx=-nx; ny=-ny; nz=-nz;
        end
        td(4,k)=nx; td(5,k)=ny; td(6,k)=nz;
    end
    P=p3;
    T=td;
end
